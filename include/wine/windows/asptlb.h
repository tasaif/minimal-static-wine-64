/*** Autogenerated by WIDL 1.7.40 from asptlb.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __asptlb_h__
#define __asptlb_h__

/* Forward declarations */

#ifndef __IRequestDictionary_FWD_DEFINED__
#define __IRequestDictionary_FWD_DEFINED__
typedef interface IRequestDictionary IRequestDictionary;
#endif

#ifndef __IResponse_FWD_DEFINED__
#define __IResponse_FWD_DEFINED__
typedef interface IResponse IResponse;
#endif

/* Headers for imported files */

#include <unknwn.h>
#include <objidl.h>
#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IRequestDictionary interface
 */
#ifndef __IRequestDictionary_INTERFACE_DEFINED__
#define __IRequestDictionary_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRequestDictionary, 0xd97a6da0, 0xa864, 0x11cf, 0x83,0xbe, 0x00,0xa0,0xc9,0x0c,0x2b,0xd8);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d97a6da0-a864-11cf-83be-00a0c90c2bd8")
IRequestDictionary : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Item(
        IRequestDictionary *iface,
        VARIANT Var,
        VARIANT *pVariantReturn) = 0;

    virtual HRESULT STDMETHODCALLTYPE get__NewEnum(
        IRequestDictionary *iface,
        IUnknown **ppEnumReturn) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Count(
        IRequestDictionary *iface,
        int *cStrRet) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Key(
        IRequestDictionary *iface,
        VARIANT VarKey,
        VARIANT *pvar) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRequestDictionary, 0xd97a6da0, 0xa864, 0x11cf, 0x83,0xbe, 0x00,0xa0,0xc9,0x0c,0x2b,0xd8)
#endif
#else
typedef struct IRequestDictionaryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRequestDictionary *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRequestDictionary *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRequestDictionary *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IRequestDictionary *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IRequestDictionary *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IRequestDictionary *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IRequestDictionary *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IRequestDictionary methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Item)(
        IRequestDictionary *This,
        IRequestDictionary *iface,
        VARIANT Var,
        VARIANT *pVariantReturn);

    HRESULT (STDMETHODCALLTYPE *get__NewEnum)(
        IRequestDictionary *This,
        IRequestDictionary *iface,
        IUnknown **ppEnumReturn);

    HRESULT (STDMETHODCALLTYPE *get_Count)(
        IRequestDictionary *This,
        IRequestDictionary *iface,
        int *cStrRet);

    HRESULT (STDMETHODCALLTYPE *get_Key)(
        IRequestDictionary *This,
        IRequestDictionary *iface,
        VARIANT VarKey,
        VARIANT *pvar);

    END_INTERFACE
} IRequestDictionaryVtbl;
interface IRequestDictionary {
    CONST_VTBL IRequestDictionaryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRequestDictionary_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRequestDictionary_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRequestDictionary_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IRequestDictionary_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IRequestDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IRequestDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IRequestDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IRequestDictionary methods ***/
#define IRequestDictionary_get_Item(This,iface,Var,pVariantReturn) (This)->lpVtbl->get_Item(This,iface,Var,pVariantReturn)
#define IRequestDictionary_get__NewEnum(This,iface,ppEnumReturn) (This)->lpVtbl->get__NewEnum(This,iface,ppEnumReturn)
#define IRequestDictionary_get_Count(This,iface,cStrRet) (This)->lpVtbl->get_Count(This,iface,cStrRet)
#define IRequestDictionary_get_Key(This,iface,VarKey,pvar) (This)->lpVtbl->get_Key(This,iface,VarKey,pvar)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IRequestDictionary_QueryInterface(IRequestDictionary* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IRequestDictionary_AddRef(IRequestDictionary* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IRequestDictionary_Release(IRequestDictionary* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IRequestDictionary_GetTypeInfoCount(IRequestDictionary* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IRequestDictionary_GetTypeInfo(IRequestDictionary* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IRequestDictionary_GetIDsOfNames(IRequestDictionary* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IRequestDictionary_Invoke(IRequestDictionary* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IRequestDictionary methods ***/
static FORCEINLINE HRESULT IRequestDictionary_get_Item(IRequestDictionary* This,IRequestDictionary *iface,VARIANT Var,VARIANT *pVariantReturn) {
    return This->lpVtbl->get_Item(This,iface,Var,pVariantReturn);
}
static FORCEINLINE HRESULT IRequestDictionary_get__NewEnum(IRequestDictionary* This,IRequestDictionary *iface,IUnknown **ppEnumReturn) {
    return This->lpVtbl->get__NewEnum(This,iface,ppEnumReturn);
}
static FORCEINLINE HRESULT IRequestDictionary_get_Count(IRequestDictionary* This,IRequestDictionary *iface,int *cStrRet) {
    return This->lpVtbl->get_Count(This,iface,cStrRet);
}
static FORCEINLINE HRESULT IRequestDictionary_get_Key(IRequestDictionary* This,IRequestDictionary *iface,VARIANT VarKey,VARIANT *pvar) {
    return This->lpVtbl->get_Key(This,iface,VarKey,pvar);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IRequestDictionary_get_Item_Proxy(
    IRequestDictionary* This,
    IRequestDictionary *iface,
    VARIANT Var,
    VARIANT *pVariantReturn);
void __RPC_STUB IRequestDictionary_get_Item_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IRequestDictionary_get__NewEnum_Proxy(
    IRequestDictionary* This,
    IRequestDictionary *iface,
    IUnknown **ppEnumReturn);
void __RPC_STUB IRequestDictionary_get__NewEnum_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IRequestDictionary_get_Count_Proxy(
    IRequestDictionary* This,
    IRequestDictionary *iface,
    int *cStrRet);
void __RPC_STUB IRequestDictionary_get_Count_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IRequestDictionary_get_Key_Proxy(
    IRequestDictionary* This,
    IRequestDictionary *iface,
    VARIANT VarKey,
    VARIANT *pvar);
void __RPC_STUB IRequestDictionary_get_Key_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IRequestDictionary_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IResponse interface
 */
#ifndef __IResponse_INTERFACE_DEFINED__
#define __IResponse_INTERFACE_DEFINED__

DEFINE_GUID(IID_IResponse, 0xd97a6da0, 0xa864, 0x11cf, 0x83,0xbe, 0x00,0xa0,0xc9,0x0c,0x2b,0xd8);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d97a6da0-a864-11cf-83be-00a0c90c2bd8")
IResponse : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Buffer(
        IResponse *iface,
        VARIANT_BOOL *fIsBuffering) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Buffer(
        IResponse *iface,
        VARIANT_BOOL fIsBuffering) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ContentType(
        IResponse *iface,
        BSTR *pbstrContentTypeRet) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ContentType(
        IResponse *iface,
        BSTR bstrContentType) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Expires(
        IResponse *iface,
        VARIANT *pvarExpiresMinutesRet) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Expires(
        IResponse *iface,
        LONG lExpiresMinutes) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ExpiresAbsolute(
        IResponse *iface,
        VARIANT *pvarExpiresRet) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ExpiresAbsolute(
        IResponse *iface,
        DATE dtExpires) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Cookies(
        IResponse *iface,
        IRequestDictionary **ppCookies) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Status(
        IResponse *iface,
        BSTR *pbstrStatusRet) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Status(
        IResponse *iface,
        BSTR bstrStatus) = 0;

    virtual HRESULT STDMETHODCALLTYPE Add(
        IResponse *iface,
        BSTR bstrHeaderValue,
        BSTR bstrHeaderName) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddHeader(
        IResponse *iface,
        BSTR bstrHeaderName,
        BSTR bstrHeaderValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE AppendToLog(
        IResponse *iface,
        BSTR bstrLogEntry) = 0;

    virtual HRESULT STDMETHODCALLTYPE BinaryWrite(
        IResponse *iface,
        VARIANT varInput) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clear(
        IResponse *iface) = 0;

    virtual HRESULT STDMETHODCALLTYPE End(
        IResponse *iface) = 0;

    virtual HRESULT STDMETHODCALLTYPE Flush(
        IResponse *iface) = 0;

    virtual HRESULT STDMETHODCALLTYPE Redirect(
        IResponse *iface,
        BSTR bstrURL) = 0;

    virtual HRESULT STDMETHODCALLTYPE Write(
        IResponse *iface,
        VARIANT varText) = 0;

    virtual HRESULT STDMETHODCALLTYPE WriteBlock(
        IResponse *iface,
        short iBlockNumber) = 0;

    virtual HRESULT STDMETHODCALLTYPE IsClientConnected(
        IResponse *iface,
        VARIANT_BOOL *pfIsClientConnected) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_get_CharSet(
        IResponse *iface,
        BSTR *pbstrCharSetRet) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_put_CharSet(
        IResponse *iface,
        BSTR bstrCharSet) = 0;

    virtual HRESULT STDMETHODCALLTYPE Pics(
        IResponse *iface,
        BSTR bstrHeaderValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_get_CacheControl(
        IResponse *iface,
        BSTR *pbstrCacheControl) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_put_CacheControl(
        IResponse *iface,
        BSTR bstrCacheControl) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_get_CodePage(
        IResponse *iface,
        LONG *plvar) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_put_CodePage(
        IResponse *iface,
        LONG lvar) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_get_LCID(
        IResponse *iface,
        LONG *plvar) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_put_LCID(
        IResponse *iface,
        LONG lvar) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IResponse, 0xd97a6da0, 0xa864, 0x11cf, 0x83,0xbe, 0x00,0xa0,0xc9,0x0c,0x2b,0xd8)
#endif
#else
typedef struct IResponseVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IResponse *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IResponse *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IResponse *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IResponse *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IResponse *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IResponse *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IResponse *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IResponse methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Buffer)(
        IResponse *This,
        IResponse *iface,
        VARIANT_BOOL *fIsBuffering);

    HRESULT (STDMETHODCALLTYPE *put_Buffer)(
        IResponse *This,
        IResponse *iface,
        VARIANT_BOOL fIsBuffering);

    HRESULT (STDMETHODCALLTYPE *get_ContentType)(
        IResponse *This,
        IResponse *iface,
        BSTR *pbstrContentTypeRet);

    HRESULT (STDMETHODCALLTYPE *put_ContentType)(
        IResponse *This,
        IResponse *iface,
        BSTR bstrContentType);

    HRESULT (STDMETHODCALLTYPE *get_Expires)(
        IResponse *This,
        IResponse *iface,
        VARIANT *pvarExpiresMinutesRet);

    HRESULT (STDMETHODCALLTYPE *put_Expires)(
        IResponse *This,
        IResponse *iface,
        LONG lExpiresMinutes);

    HRESULT (STDMETHODCALLTYPE *get_ExpiresAbsolute)(
        IResponse *This,
        IResponse *iface,
        VARIANT *pvarExpiresRet);

    HRESULT (STDMETHODCALLTYPE *put_ExpiresAbsolute)(
        IResponse *This,
        IResponse *iface,
        DATE dtExpires);

    HRESULT (STDMETHODCALLTYPE *get_Cookies)(
        IResponse *This,
        IResponse *iface,
        IRequestDictionary **ppCookies);

    HRESULT (STDMETHODCALLTYPE *get_Status)(
        IResponse *This,
        IResponse *iface,
        BSTR *pbstrStatusRet);

    HRESULT (STDMETHODCALLTYPE *put_Status)(
        IResponse *This,
        IResponse *iface,
        BSTR bstrStatus);

    HRESULT (STDMETHODCALLTYPE *Add)(
        IResponse *This,
        IResponse *iface,
        BSTR bstrHeaderValue,
        BSTR bstrHeaderName);

    HRESULT (STDMETHODCALLTYPE *AddHeader)(
        IResponse *This,
        IResponse *iface,
        BSTR bstrHeaderName,
        BSTR bstrHeaderValue);

    HRESULT (STDMETHODCALLTYPE *AppendToLog)(
        IResponse *This,
        IResponse *iface,
        BSTR bstrLogEntry);

    HRESULT (STDMETHODCALLTYPE *BinaryWrite)(
        IResponse *This,
        IResponse *iface,
        VARIANT varInput);

    HRESULT (STDMETHODCALLTYPE *Clear)(
        IResponse *This,
        IResponse *iface);

    HRESULT (STDMETHODCALLTYPE *End)(
        IResponse *This,
        IResponse *iface);

    HRESULT (STDMETHODCALLTYPE *Flush)(
        IResponse *This,
        IResponse *iface);

    HRESULT (STDMETHODCALLTYPE *Redirect)(
        IResponse *This,
        IResponse *iface,
        BSTR bstrURL);

    HRESULT (STDMETHODCALLTYPE *Write)(
        IResponse *This,
        IResponse *iface,
        VARIANT varText);

    HRESULT (STDMETHODCALLTYPE *WriteBlock)(
        IResponse *This,
        IResponse *iface,
        short iBlockNumber);

    HRESULT (STDMETHODCALLTYPE *IsClientConnected)(
        IResponse *This,
        IResponse *iface,
        VARIANT_BOOL *pfIsClientConnected);

    HRESULT (STDMETHODCALLTYPE *get_get_CharSet)(
        IResponse *This,
        IResponse *iface,
        BSTR *pbstrCharSetRet);

    HRESULT (STDMETHODCALLTYPE *put_put_CharSet)(
        IResponse *This,
        IResponse *iface,
        BSTR bstrCharSet);

    HRESULT (STDMETHODCALLTYPE *Pics)(
        IResponse *This,
        IResponse *iface,
        BSTR bstrHeaderValue);

    HRESULT (STDMETHODCALLTYPE *get_get_CacheControl)(
        IResponse *This,
        IResponse *iface,
        BSTR *pbstrCacheControl);

    HRESULT (STDMETHODCALLTYPE *put_put_CacheControl)(
        IResponse *This,
        IResponse *iface,
        BSTR bstrCacheControl);

    HRESULT (STDMETHODCALLTYPE *get_get_CodePage)(
        IResponse *This,
        IResponse *iface,
        LONG *plvar);

    HRESULT (STDMETHODCALLTYPE *put_put_CodePage)(
        IResponse *This,
        IResponse *iface,
        LONG lvar);

    HRESULT (STDMETHODCALLTYPE *get_get_LCID)(
        IResponse *This,
        IResponse *iface,
        LONG *plvar);

    HRESULT (STDMETHODCALLTYPE *put_put_LCID)(
        IResponse *This,
        IResponse *iface,
        LONG lvar);

    END_INTERFACE
} IResponseVtbl;
interface IResponse {
    CONST_VTBL IResponseVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IResponse_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IResponse_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IResponse_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IResponse_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IResponse_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IResponse_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IResponse_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IResponse methods ***/
#define IResponse_get_Buffer(This,iface,fIsBuffering) (This)->lpVtbl->get_Buffer(This,iface,fIsBuffering)
#define IResponse_put_Buffer(This,iface,fIsBuffering) (This)->lpVtbl->put_Buffer(This,iface,fIsBuffering)
#define IResponse_get_ContentType(This,iface,pbstrContentTypeRet) (This)->lpVtbl->get_ContentType(This,iface,pbstrContentTypeRet)
#define IResponse_put_ContentType(This,iface,bstrContentType) (This)->lpVtbl->put_ContentType(This,iface,bstrContentType)
#define IResponse_get_Expires(This,iface,pvarExpiresMinutesRet) (This)->lpVtbl->get_Expires(This,iface,pvarExpiresMinutesRet)
#define IResponse_put_Expires(This,iface,lExpiresMinutes) (This)->lpVtbl->put_Expires(This,iface,lExpiresMinutes)
#define IResponse_get_ExpiresAbsolute(This,iface,pvarExpiresRet) (This)->lpVtbl->get_ExpiresAbsolute(This,iface,pvarExpiresRet)
#define IResponse_put_ExpiresAbsolute(This,iface,dtExpires) (This)->lpVtbl->put_ExpiresAbsolute(This,iface,dtExpires)
#define IResponse_get_Cookies(This,iface,ppCookies) (This)->lpVtbl->get_Cookies(This,iface,ppCookies)
#define IResponse_get_Status(This,iface,pbstrStatusRet) (This)->lpVtbl->get_Status(This,iface,pbstrStatusRet)
#define IResponse_put_Status(This,iface,bstrStatus) (This)->lpVtbl->put_Status(This,iface,bstrStatus)
#define IResponse_Add(This,iface,bstrHeaderValue,bstrHeaderName) (This)->lpVtbl->Add(This,iface,bstrHeaderValue,bstrHeaderName)
#define IResponse_AddHeader(This,iface,bstrHeaderName,bstrHeaderValue) (This)->lpVtbl->AddHeader(This,iface,bstrHeaderName,bstrHeaderValue)
#define IResponse_AppendToLog(This,iface,bstrLogEntry) (This)->lpVtbl->AppendToLog(This,iface,bstrLogEntry)
#define IResponse_BinaryWrite(This,iface,varInput) (This)->lpVtbl->BinaryWrite(This,iface,varInput)
#define IResponse_Clear(This,iface) (This)->lpVtbl->Clear(This,iface)
#define IResponse_End(This,iface) (This)->lpVtbl->End(This,iface)
#define IResponse_Flush(This,iface) (This)->lpVtbl->Flush(This,iface)
#define IResponse_Redirect(This,iface,bstrURL) (This)->lpVtbl->Redirect(This,iface,bstrURL)
#define IResponse_Write(This,iface,varText) (This)->lpVtbl->Write(This,iface,varText)
#define IResponse_WriteBlock(This,iface,iBlockNumber) (This)->lpVtbl->WriteBlock(This,iface,iBlockNumber)
#define IResponse_IsClientConnected(This,iface,pfIsClientConnected) (This)->lpVtbl->IsClientConnected(This,iface,pfIsClientConnected)
#define IResponse_get_get_CharSet(This,iface,pbstrCharSetRet) (This)->lpVtbl->get_get_CharSet(This,iface,pbstrCharSetRet)
#define IResponse_put_put_CharSet(This,iface,bstrCharSet) (This)->lpVtbl->put_put_CharSet(This,iface,bstrCharSet)
#define IResponse_Pics(This,iface,bstrHeaderValue) (This)->lpVtbl->Pics(This,iface,bstrHeaderValue)
#define IResponse_get_get_CacheControl(This,iface,pbstrCacheControl) (This)->lpVtbl->get_get_CacheControl(This,iface,pbstrCacheControl)
#define IResponse_put_put_CacheControl(This,iface,bstrCacheControl) (This)->lpVtbl->put_put_CacheControl(This,iface,bstrCacheControl)
#define IResponse_get_get_CodePage(This,iface,plvar) (This)->lpVtbl->get_get_CodePage(This,iface,plvar)
#define IResponse_put_put_CodePage(This,iface,lvar) (This)->lpVtbl->put_put_CodePage(This,iface,lvar)
#define IResponse_get_get_LCID(This,iface,plvar) (This)->lpVtbl->get_get_LCID(This,iface,plvar)
#define IResponse_put_put_LCID(This,iface,lvar) (This)->lpVtbl->put_put_LCID(This,iface,lvar)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IResponse_QueryInterface(IResponse* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IResponse_AddRef(IResponse* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IResponse_Release(IResponse* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IResponse_GetTypeInfoCount(IResponse* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IResponse_GetTypeInfo(IResponse* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IResponse_GetIDsOfNames(IResponse* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IResponse_Invoke(IResponse* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IResponse methods ***/
static FORCEINLINE HRESULT IResponse_get_Buffer(IResponse* This,IResponse *iface,VARIANT_BOOL *fIsBuffering) {
    return This->lpVtbl->get_Buffer(This,iface,fIsBuffering);
}
static FORCEINLINE HRESULT IResponse_put_Buffer(IResponse* This,IResponse *iface,VARIANT_BOOL fIsBuffering) {
    return This->lpVtbl->put_Buffer(This,iface,fIsBuffering);
}
static FORCEINLINE HRESULT IResponse_get_ContentType(IResponse* This,IResponse *iface,BSTR *pbstrContentTypeRet) {
    return This->lpVtbl->get_ContentType(This,iface,pbstrContentTypeRet);
}
static FORCEINLINE HRESULT IResponse_put_ContentType(IResponse* This,IResponse *iface,BSTR bstrContentType) {
    return This->lpVtbl->put_ContentType(This,iface,bstrContentType);
}
static FORCEINLINE HRESULT IResponse_get_Expires(IResponse* This,IResponse *iface,VARIANT *pvarExpiresMinutesRet) {
    return This->lpVtbl->get_Expires(This,iface,pvarExpiresMinutesRet);
}
static FORCEINLINE HRESULT IResponse_put_Expires(IResponse* This,IResponse *iface,LONG lExpiresMinutes) {
    return This->lpVtbl->put_Expires(This,iface,lExpiresMinutes);
}
static FORCEINLINE HRESULT IResponse_get_ExpiresAbsolute(IResponse* This,IResponse *iface,VARIANT *pvarExpiresRet) {
    return This->lpVtbl->get_ExpiresAbsolute(This,iface,pvarExpiresRet);
}
static FORCEINLINE HRESULT IResponse_put_ExpiresAbsolute(IResponse* This,IResponse *iface,DATE dtExpires) {
    return This->lpVtbl->put_ExpiresAbsolute(This,iface,dtExpires);
}
static FORCEINLINE HRESULT IResponse_get_Cookies(IResponse* This,IResponse *iface,IRequestDictionary **ppCookies) {
    return This->lpVtbl->get_Cookies(This,iface,ppCookies);
}
static FORCEINLINE HRESULT IResponse_get_Status(IResponse* This,IResponse *iface,BSTR *pbstrStatusRet) {
    return This->lpVtbl->get_Status(This,iface,pbstrStatusRet);
}
static FORCEINLINE HRESULT IResponse_put_Status(IResponse* This,IResponse *iface,BSTR bstrStatus) {
    return This->lpVtbl->put_Status(This,iface,bstrStatus);
}
static FORCEINLINE HRESULT IResponse_Add(IResponse* This,IResponse *iface,BSTR bstrHeaderValue,BSTR bstrHeaderName) {
    return This->lpVtbl->Add(This,iface,bstrHeaderValue,bstrHeaderName);
}
static FORCEINLINE HRESULT IResponse_AddHeader(IResponse* This,IResponse *iface,BSTR bstrHeaderName,BSTR bstrHeaderValue) {
    return This->lpVtbl->AddHeader(This,iface,bstrHeaderName,bstrHeaderValue);
}
static FORCEINLINE HRESULT IResponse_AppendToLog(IResponse* This,IResponse *iface,BSTR bstrLogEntry) {
    return This->lpVtbl->AppendToLog(This,iface,bstrLogEntry);
}
static FORCEINLINE HRESULT IResponse_BinaryWrite(IResponse* This,IResponse *iface,VARIANT varInput) {
    return This->lpVtbl->BinaryWrite(This,iface,varInput);
}
static FORCEINLINE HRESULT IResponse_Clear(IResponse* This,IResponse *iface) {
    return This->lpVtbl->Clear(This,iface);
}
static FORCEINLINE HRESULT IResponse_End(IResponse* This,IResponse *iface) {
    return This->lpVtbl->End(This,iface);
}
static FORCEINLINE HRESULT IResponse_Flush(IResponse* This,IResponse *iface) {
    return This->lpVtbl->Flush(This,iface);
}
static FORCEINLINE HRESULT IResponse_Redirect(IResponse* This,IResponse *iface,BSTR bstrURL) {
    return This->lpVtbl->Redirect(This,iface,bstrURL);
}
static FORCEINLINE HRESULT IResponse_Write(IResponse* This,IResponse *iface,VARIANT varText) {
    return This->lpVtbl->Write(This,iface,varText);
}
static FORCEINLINE HRESULT IResponse_WriteBlock(IResponse* This,IResponse *iface,short iBlockNumber) {
    return This->lpVtbl->WriteBlock(This,iface,iBlockNumber);
}
static FORCEINLINE HRESULT IResponse_IsClientConnected(IResponse* This,IResponse *iface,VARIANT_BOOL *pfIsClientConnected) {
    return This->lpVtbl->IsClientConnected(This,iface,pfIsClientConnected);
}
static FORCEINLINE HRESULT IResponse_get_get_CharSet(IResponse* This,IResponse *iface,BSTR *pbstrCharSetRet) {
    return This->lpVtbl->get_get_CharSet(This,iface,pbstrCharSetRet);
}
static FORCEINLINE HRESULT IResponse_put_put_CharSet(IResponse* This,IResponse *iface,BSTR bstrCharSet) {
    return This->lpVtbl->put_put_CharSet(This,iface,bstrCharSet);
}
static FORCEINLINE HRESULT IResponse_Pics(IResponse* This,IResponse *iface,BSTR bstrHeaderValue) {
    return This->lpVtbl->Pics(This,iface,bstrHeaderValue);
}
static FORCEINLINE HRESULT IResponse_get_get_CacheControl(IResponse* This,IResponse *iface,BSTR *pbstrCacheControl) {
    return This->lpVtbl->get_get_CacheControl(This,iface,pbstrCacheControl);
}
static FORCEINLINE HRESULT IResponse_put_put_CacheControl(IResponse* This,IResponse *iface,BSTR bstrCacheControl) {
    return This->lpVtbl->put_put_CacheControl(This,iface,bstrCacheControl);
}
static FORCEINLINE HRESULT IResponse_get_get_CodePage(IResponse* This,IResponse *iface,LONG *plvar) {
    return This->lpVtbl->get_get_CodePage(This,iface,plvar);
}
static FORCEINLINE HRESULT IResponse_put_put_CodePage(IResponse* This,IResponse *iface,LONG lvar) {
    return This->lpVtbl->put_put_CodePage(This,iface,lvar);
}
static FORCEINLINE HRESULT IResponse_get_get_LCID(IResponse* This,IResponse *iface,LONG *plvar) {
    return This->lpVtbl->get_get_LCID(This,iface,plvar);
}
static FORCEINLINE HRESULT IResponse_put_put_LCID(IResponse* This,IResponse *iface,LONG lvar) {
    return This->lpVtbl->put_put_LCID(This,iface,lvar);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IResponse_get_Buffer_Proxy(
    IResponse* This,
    IResponse *iface,
    VARIANT_BOOL *fIsBuffering);
void __RPC_STUB IResponse_get_Buffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_put_Buffer_Proxy(
    IResponse* This,
    IResponse *iface,
    VARIANT_BOOL fIsBuffering);
void __RPC_STUB IResponse_put_Buffer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_get_ContentType_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR *pbstrContentTypeRet);
void __RPC_STUB IResponse_get_ContentType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_put_ContentType_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR bstrContentType);
void __RPC_STUB IResponse_put_ContentType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_get_Expires_Proxy(
    IResponse* This,
    IResponse *iface,
    VARIANT *pvarExpiresMinutesRet);
void __RPC_STUB IResponse_get_Expires_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_put_Expires_Proxy(
    IResponse* This,
    IResponse *iface,
    LONG lExpiresMinutes);
void __RPC_STUB IResponse_put_Expires_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_get_ExpiresAbsolute_Proxy(
    IResponse* This,
    IResponse *iface,
    VARIANT *pvarExpiresRet);
void __RPC_STUB IResponse_get_ExpiresAbsolute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_put_ExpiresAbsolute_Proxy(
    IResponse* This,
    IResponse *iface,
    DATE dtExpires);
void __RPC_STUB IResponse_put_ExpiresAbsolute_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_get_Cookies_Proxy(
    IResponse* This,
    IResponse *iface,
    IRequestDictionary **ppCookies);
void __RPC_STUB IResponse_get_Cookies_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_get_Status_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR *pbstrStatusRet);
void __RPC_STUB IResponse_get_Status_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_put_Status_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR bstrStatus);
void __RPC_STUB IResponse_put_Status_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_Add_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR bstrHeaderValue,
    BSTR bstrHeaderName);
void __RPC_STUB IResponse_Add_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_AddHeader_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR bstrHeaderName,
    BSTR bstrHeaderValue);
void __RPC_STUB IResponse_AddHeader_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_AppendToLog_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR bstrLogEntry);
void __RPC_STUB IResponse_AppendToLog_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_BinaryWrite_Proxy(
    IResponse* This,
    IResponse *iface,
    VARIANT varInput);
void __RPC_STUB IResponse_BinaryWrite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_Clear_Proxy(
    IResponse* This,
    IResponse *iface);
void __RPC_STUB IResponse_Clear_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_End_Proxy(
    IResponse* This,
    IResponse *iface);
void __RPC_STUB IResponse_End_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_Flush_Proxy(
    IResponse* This,
    IResponse *iface);
void __RPC_STUB IResponse_Flush_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_Redirect_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR bstrURL);
void __RPC_STUB IResponse_Redirect_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_Write_Proxy(
    IResponse* This,
    IResponse *iface,
    VARIANT varText);
void __RPC_STUB IResponse_Write_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_WriteBlock_Proxy(
    IResponse* This,
    IResponse *iface,
    short iBlockNumber);
void __RPC_STUB IResponse_WriteBlock_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_IsClientConnected_Proxy(
    IResponse* This,
    IResponse *iface,
    VARIANT_BOOL *pfIsClientConnected);
void __RPC_STUB IResponse_IsClientConnected_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_get_get_CharSet_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR *pbstrCharSetRet);
void __RPC_STUB IResponse_get_get_CharSet_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_put_put_CharSet_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR bstrCharSet);
void __RPC_STUB IResponse_put_put_CharSet_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_Pics_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR bstrHeaderValue);
void __RPC_STUB IResponse_Pics_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_get_get_CacheControl_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR *pbstrCacheControl);
void __RPC_STUB IResponse_get_get_CacheControl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_put_put_CacheControl_Proxy(
    IResponse* This,
    IResponse *iface,
    BSTR bstrCacheControl);
void __RPC_STUB IResponse_put_put_CacheControl_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_get_get_CodePage_Proxy(
    IResponse* This,
    IResponse *iface,
    LONG *plvar);
void __RPC_STUB IResponse_get_get_CodePage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_put_put_CodePage_Proxy(
    IResponse* This,
    IResponse *iface,
    LONG lvar);
void __RPC_STUB IResponse_put_put_CodePage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_get_get_LCID_Proxy(
    IResponse* This,
    IResponse *iface,
    LONG *plvar);
void __RPC_STUB IResponse_get_get_LCID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IResponse_put_put_LCID_Proxy(
    IResponse* This,
    IResponse *iface,
    LONG lvar);
void __RPC_STUB IResponse_put_put_LCID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IResponse_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);
ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __asptlb_h__ */
